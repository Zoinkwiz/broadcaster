/*
 * Copyright (c) 2021 by Zoinkwiz
 * Copyright (c) 2020 by micro
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Portions of the code are based off of the "Implings" RuneLite plugin.
 * The "Implings" is:
 * Copyright (c) 2017, Robin <robin.weymans@gmail.com>
 * All rights reserved.
 */
package com.broadcast;

import com.google.common.collect.ImmutableMap;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.NpcID;

@AllArgsConstructor
@Getter
public enum Pet
{
	ABYSSAL_ORPHAN("Abyssal orphan", NpcID.ABYSSAL_ORPHAN, NpcID.ABYSSAL_ORPHAN_5884),
	BABY_CHINCHOMPA("Baby chinchompa", NpcID.BABY_CHINCHOMPA, NpcID.BABY_CHINCHOMPA_6719,
		NpcID.BABY_CHINCHOMPA_6720, NpcID.BABY_CHINCHOMPA_6721, NpcID.BABY_CHINCHOMPA_6756,
		NpcID.BABY_CHINCHOMPA_6757, NpcID.BABY_CHINCHOMPA_6758, NpcID.BABY_CHINCHOMPA_6759),
	BABY_MOLE("Baby mole", NpcID.BABY_MOLE, NpcID.BABY_MOLE_5781, NpcID.BABY_MOLE_5782,
		NpcID.BABY_MOLE_6635, NpcID.BABY_MOLE_6651),
	BEAVER("Beaver", NpcID.BEAVER, NpcID.BEAVER_6724),
	BLOODHOUND("Bloodhound", NpcID.BLOODHOUND, NpcID.BLOODHOUND_7232),
	CALLISTO_CUB("Callisto cub", NpcID.CALLISTO_CUB, NpcID.CALLISTO_CUB_5558),
	CHAOS_ELEMENTAL_JR("Chaos elemental jr.", NpcID.CHAOS_ELEMENTAL_JR, NpcID.CHAOS_ELEMENTAL_JR_5907),
	CHOMPY_CHICK("Chompy chick", NpcID.CHOMPY_CHICK, NpcID.CHOMPY_CHICK_4002),
	CORPOREAL_CRITTER("Corporeal critter", NpcID.CORPOREAL_CRITTER, NpcID.CORPOREAL_CRITTER_8010),
	CORRUPTED_YOUNGLLEF("Corrupted youngllef", NpcID.CORRUPTED_YOUNGLLEF, NpcID.CORRUPTED_YOUNGLLEF_8738),
	DAGANNOTH_PRIME_JR("Dagannoth prime jr.", NpcID.DAGANNOTH_PRIME_JR, NpcID.DAGANNOTH_PRIME_JR_6629),
	DAGANNOTH_REX_JR("Dagannoth rex jr.", NpcID.DAGANNOTH_REX_JR, NpcID.DAGANNOTH_REX_JR_6641),
	DAGANNOTH_SUPREME_JR("Dagannoth supreme jr.", NpcID.DAGANNOTH_SUPREME_JR, NpcID.DAGANNOTH_SUPREME_JR_6628),
	DARK_CORE("Dark core", NpcID.DARK_CORE, NpcID.DARK_CORE_388),
	GENERAL_GRAARDOR_JR("General graardor jr.", NpcID.GENERAL_GRAARDOR_JR, NpcID.GENERAL_GRAARDOR_JR_6644),
	GIANT_SQUIRREL("Giant squirrel", NpcID.GIANT_SQUIRREL, NpcID.GIANT_SQUIRREL_7351, NpcID.GIANT_SQUIRREL_9666),
	HELLPUPPY("Hellpuppy", NpcID.HELLPUPPY, NpcID.HELLPUPPY_3099),
	HERBI("Herbi", NpcID.HERBI, NpcID.HERBI_7760),
	HERON("Heron", NpcID.HERON, NpcID.HERON_6722),
	IKKLE_HYDRA("Ikkle hydra", NpcID.IKKLE_HYDRA, NpcID.IKKLE_HYDRA_8493, NpcID.IKKLE_HYDRA_8494,
		NpcID.IKKLE_HYDRA_8495,
		NpcID.IKKLE_HYDRA_8517, NpcID.IKKLE_HYDRA_8518, NpcID.IKKLE_HYDRA_8519, NpcID.IKKLE_HYDRA_8520),
	JALNIBREK("Jal-nib-brek", NpcID.JALNIBREK, NpcID.JALNIBREK_7675, NpcID.TZREKZUK, NpcID.TZREKZUK_8011),
	KALPHITE_PRINCESS("Kalphite princess", NpcID.KALPHITE_PRINCESS, NpcID.KALPHITE_PRINCESS_6638,
		NpcID.KALPHITE_PRINCESS_6653, NpcID.KALPHITE_PRINCESS_6654),
	KRAKEN_6640("Kraken", NpcID.KRAKEN_6640, NpcID.KRAKEN_6656),
	KREEARRA_JR("Kree'arra jr.", NpcID.KREEARRA_JR, NpcID.KREEARRA_JR_6643),
	KRIL_TSUTSAROTH_JR("K'ril Tsutsaroth jr.", NpcID.KRIL_TSUTSAROTH_JR, NpcID.KRIL_TSUTSAROTH_JR_6647),
	LIL_CREATOR("Soul Wars pet", NpcID.LIL_CREATOR, NpcID.LIL_CREATOR_3566, NpcID.LIL_DESTRUCTOR,
		NpcID.LIL_DESTRUCTOR_5008),
	LIL_ZIK("Lil' zik", NpcID.LIL_ZIK, NpcID.LIL_ZIK_8337),
	LITTLE_NIGHTMARE("Little nightmare", NpcID.LITTLE_NIGHTMARE, NpcID.LITTLE_NIGHTMARE_9399),
	MIDNIGHT("Midnight", NpcID.MIDNIGHT, NpcID.MIDNIGHT_7893),
	NOON("Noon", NpcID.NOON, NpcID.NOON_7892),
	OLMLET("Olmlet", NpcID.OLMLET, NpcID.OLMLET_7520),
	PENANCE_PET("Penance pet", NpcID.PENANCE_PET, NpcID.PENANCE_PET_6674),
	PHOENIX("Phoenix", NpcID.PHOENIX_7368, NpcID.PHOENIX_7370),
	PRINCE_BLACK_DRAGON("Prince Black Dragon", NpcID.PRINCE_BLACK_DRAGON, NpcID.PRINCE_BLACK_DRAGON_6652),
	RED("Red", NpcID.RED, NpcID.RED_9852),
	RIFT_GUARDIAN("Rift Guardian", NpcID.RIFT_GUARDIAN, NpcID.RIFT_GUARDIAN_7338,
		NpcID.RIFT_GUARDIAN_7339, NpcID.RIFT_GUARDIAN_7340, NpcID.RIFT_GUARDIAN_7341,
		NpcID.RIFT_GUARDIAN_7342, NpcID.RIFT_GUARDIAN_7343, NpcID.RIFT_GUARDIAN_7344,
		NpcID.RIFT_GUARDIAN_7345, NpcID.RIFT_GUARDIAN_7346, NpcID.RIFT_GUARDIAN_7347,
		NpcID.RIFT_GUARDIAN_7348, NpcID.RIFT_GUARDIAN_7349, NpcID.RIFT_GUARDIAN_7350,
		NpcID.RIFT_GUARDIAN_7354, NpcID.RIFT_GUARDIAN_7355, NpcID.RIFT_GUARDIAN_7356,
		NpcID.RIFT_GUARDIAN_7357, NpcID.RIFT_GUARDIAN_7358, NpcID.RIFT_GUARDIAN_7359,
		NpcID.RIFT_GUARDIAN_7360, NpcID.RIFT_GUARDIAN_7361, NpcID.RIFT_GUARDIAN_7362,
		NpcID.RIFT_GUARDIAN_7363, NpcID.RIFT_GUARDIAN_7364, NpcID.RIFT_GUARDIAN_7365,
		NpcID.RIFT_GUARDIAN_7366, NpcID.RIFT_GUARDIAN_7367, NpcID.RIFT_GUARDIAN_8024,
		NpcID.RIFT_GUARDIAN_8028
	),
	ROCK_GOLEM("Rock golem", NpcID.ROCK_GOLEM, NpcID.ROCK_GOLEM_7439),
	ROCKY("Rocky", NpcID.ROCKY, NpcID.ROCKY_7353),
	SCORPIAS_OFFSPRING("Scorpia's offspring", NpcID.SCORPIAS_OFFSPRING, NpcID.SCORPIAS_OFFSPRING_5561, NpcID.SCORPIAS_OFFSPRING_6616),
	SKOTOS("Skotos", NpcID.SKOTOS, NpcID.SKOTOS_7671),
	SMOKE_DEVIL("Smoke devil", NpcID.SMOKE_DEVIL_6639, NpcID.SMOKE_DEVIL_6655, NpcID.SMOKE_DEVIL_8482,
		NpcID.SMOKE_DEVIL_8483),
	SMOLCANO("Smolcano", NpcID.SMOLCANO, NpcID.SMOLCANO_8739),
	SNAKELING("Snakeling", NpcID.SNAKELING_2127),
	SRARACHA("Sraracha", NpcID.SRARACHA, NpcID.SRARACHA_2144),
	TANGLEROOT("Tangleroot", NpcID.TANGLEROOT, NpcID.TANGLEROOT_7352),
	TINY_TEMPOR("Tiny Tempor", NpcID.TINY_TEMPOR, NpcID.TINY_TEMPOR_10637),
	TZREKJAD("Tzrek-jad", NpcID.TZREKJAD, NpcID.TZREKJAD_5893),
	VENENATIS_SPIDERLING("Venentis spiderling", NpcID.VENENATIS_SPIDERLING, NpcID.VENENATIS_SPIDERLING_5557),
	VETION_JR("Vetion Jr.", NpcID.VETION_JR, NpcID.VETION_JR_5537, NpcID.VETION_JR_5559, NpcID.VETION_JR_5560),
	VORKI("Vorki", NpcID.VORKI, NpcID.VORKI_8029),
	YOUNGLLEF("Youngllef", NpcID.YOUNGLLEF, NpcID.YOUNGLLEF_8737),
	ZILYANA_JR("Zilyana Jr.", NpcID.ZILYANA_JR, NpcID.ZILYANA_JR_6646);

	private final List<Integer> npcIds;
	private final String name;

	Pet(String name, Integer... npcIds)
	{
		this.name = name;
		this.npcIds = Arrays.asList(npcIds);
	}

	private static final Map<Integer, Pet> PETS;

	static
	{
		ImmutableMap.Builder<Integer, Pet> builder = new ImmutableMap.Builder<>();

		for (Pet pet : values())
		{
			pet.npcIds.forEach((npcId) -> builder.put(npcId, pet));
		}

		PETS = builder.build();
	}

	/**
	 * Returns the Pet enum if the passed NPCid is a pet, null if not
	 */
	static Pet findPet(int npcId)
	{
		return PETS.get(npcId);
	}
}
